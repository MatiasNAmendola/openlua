chunk : { stat [ ';' ] }

block : chunk

stat : varlist '=' explist
     | functioncall
     | do block end
     | while exp do block end
     | repeat block until exp
     | if exp then block { elseif exp then block } [ else block ] end
     | return [ explist ]
     | break
     | for Name '=' exp ',' exp [ ',' exp ] do block end
     | for Name { ',' Name } in explist do block end
     | function funcname funcbody
     | local function Name funcbody
     | local namelist [ init ]

funcname : Name { '.' Name } [ ':' Name ]

varlist : var { ',' var } 

var : Name | prefixexp '[' exp ']' | prefixexp '.' Name

namelist : Name { ',' Name } 

init : '=' explist

explist : { exp ',' } exp

exp : nil | false | true | Number | Literal
    | func | prefixexp | tableconstructor | exp binop exp | unop exp

prefixexp : var | functioncall | '(' exp ')'

functioncall : prefixexp args | prefixexp ':' Name args

args : '(' [ explist ] ')' | tableconstructor | Literal

func : function funcbody

funcbody : '(' [ parlist ] ')' block end

parlist : Name { ',' Name } [ ',' '...' ] | '...'

tableconstructor : '{' [ fieldlist ] '}'

fieldlist : field { fieldsep field } [ fieldsep ]

field : '[' exp ']' '=' exp | name '=' exp | exp

fieldsep : ',' | ';'

binop : '+' | '-' | '*' | '/' | '^' | '..'
      | '<' | '<=' | '>' | '>=' | '==' | '~='
      | and | or

unop : '-' | not